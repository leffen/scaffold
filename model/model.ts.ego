<%
  package model

 import (
  "strings"
  "github.com/boourns/scaffold/ast"
  //"github.com/boourns/scaffold/util"
  //"github.com/boourns/scaffold/sqlgen"
  //"fmt"
  )

//arrays and slices aren't handled properly.
func tsTypeForField(f ast.Field) string {
    switch f.Type {
        case "int", "int8", "int16",  "int32",  "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "byte", "rune", "float32", "float64":
            return "number"
        case "string":
            return "string"
        case "bool":
            return "boolean"
        case "time.Time":
            return "Date"
        default:
            return tsTypeForSQLType(f)
    }
}

func tsTypeForSQLType(f ast.Field) string {
    override := f.Override("sqlType", "")
    switch override {
        case "DATETIME":
            return "Date"
        case "TEXT":
            return "string"
        default:
            return "any"
    }
}

func fieldsAsColumnDescriptions(m * ast.Model) string {
    columns := []string{}
    for _, f := range m.Fields {
        columns = append(columns, fmt.Sprintf("%s: \"%s.%s\"", f.NameInCamelCase(), m.Name, f.Name))
    }
    return strings.Join(columns, ", ")
}

func fieldsByColumnDescriptions(m * ast.Model) string {
    columns := []string{}
    for _, f := range m.Fields {
        columns = append(columns, fmt.Sprintf("${%s.columns.%s}", m.Name, f.NameInCamelCase()))
    }
    return strings.Join(columns, ", ")
}

func modelTemplateTS(w io.Writer, m *ast.Model) {
%>
class <%== m.Name %> {
  <% for _, field := range m.Fields { %>
  <%== field.Name %>?: <%== tsTypeForField(field) %>
  <%}%>
  static columns = { <%==fieldsAsColumnDescriptions(m)%> }
  static SelectAll: string = `SELECT <%==fieldsByColumnDescriptions(m)%> FROM <%== m.Name %>`
  static SelectByID: string = `SELECT <%==fieldsByColumnDescriptions(m)%> FROM <%== m.Name %> WHERE ID=?`
}
export default <%== m.Name %>
<%}%>
